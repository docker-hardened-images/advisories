{
  "modified": "2024-06-04T19:39:13Z",
  "published": "2024-06-04T19:39:13Z",
  "schema_version": "1.5.0",
  "id": "CVE-2024-32975",
  "aliases": [
    "GHSA-g9mq-6v96-cpqc"
  ],
  "details": "### Summary\r\nFollowing crash at `QuicheDataReader::PeekVarInt62Length()` are reported. It is caused by integer underflow in `QuicStreamSequencerBuffer::PeekRegion()` implementation.\r\n\r\n### Details\r\n```console\r\n(gdb) bt full\r\n#0  0x00007f6d613e7f7c in pthread_kill@@GLIBC_2.34 () from /usr/drte/v5/lib64/libc.so.6\r\nNo symbol table info available.\r\n#1  0x00007f6d61396f22 in raise () from /usr/drte/v5/lib64/libc.so.6\r\nNo symbol table info available.\r\n#2  0x000056028969833f in Envoy::SignalAction::sigHandler (sig=11, info=\u003coptimized out\u003e, context=0x7f6d2c28cb80) at external/envoy/source/common/signal/signal_action.cc:53\r\n        tracer = {\u003cEnvoy::Logger::Loggable\u003c(Envoy::Logger::Id)4\u003e\u003e = {\u003cNo data fields\u003e}, static log_to_stderr_ = false, static MaxStackDepth = 64, stack_trace_ = {0x5602894ceb8a \u003cquic::HttpDecoder::ReadFrameType(quic::QuicDataReader*)+58\u003e, 0x5602894d06c3 \u003cquic::HttpDecoder::ProcessInput(char const*, unsigned long)+787\u003e, 0x56028942cb2b \u003cquic::QuicSpdyStream::OnDataAvailable()+315\u003e, 0x560289437afb \u003cquic::QpackDecodedHeadersAccumulator::OnDecodingCompleted()+107\u003e, 0x5602895cec4a \u003cquic::QpackDecoderHeaderTable::InsertEntry(std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e, std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e)+90\u003e, 0x560289439b6d \u003cquic::QpackEncoderStreamReceiver::OnInstructionDecoded(quic::QpackInstruction const*)+109\u003e, 0x56028943f5f2 \u003cquic::QpackInstructionDecoder::DoStartField()+626\u003e, 0x56028943f750 \u003cquic::QpackInstructionDecoder::Decode(std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e)+288\u003e, 0x560289442035 \u003cquic::QpackReceiveStream::OnDataAvailable()+117\u003e, 0x56028947e4eb \u003cquic::QuicStreamSequencer::OnFrameData(unsigned long, unsigned long, char const*)+843\u003e, 0x56028949b8a2 \u003cquic::QuicConnection::OnStreamFrame(quic::QuicStreamFrame const\u0026)+626\u003e, 0x5602894edc6c \u003cquic::QuicFramer::ProcessIetfFrameData(quic::QuicDataReader*, quic::QuicPacketHeader const\u0026, quic::EncryptionLevel)+460\u003e, 0x5602894ef18b \u003cquic::QuicFramer::ProcessIetfDataPacket(quic::QuicDataReader*, quic::QuicPacketHeader*, quic::QuicEncryptedPacket const\u0026, char*, unsigned long)+2491\u003e, 0x5602894ef49a \u003cquic::QuicFramer::ProcessPacketInternal(quic::QuicEncryptedPacket const\u0026)+458\u003e, 0x5602894ef5d8 \u003cquic::QuicFramer::ProcessPacket(quic::QuicEncryptedPacket const\u0026)+24\u003e, 0x5602894a61d2 \u003cquic::QuicConnection::ProcessUdpPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+1010\u003e, 0x560289469224 \u003cquic::QuicSession::ProcessUdpPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+84\u003e, 0x560289403d2d \u003cEnvoy::Quic::EnvoyQuicServerSession::ProcessUdpPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+61\u003e, 0x5602893c55fd \u003cquic::QuicDispatcher::MaybeDispatchPacket(quic::ReceivedPacketInfo const\u0026)+429\u003e, 0x5602893c8094 \u003cquic::QuicDispatcher::ProcessPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+308\u003e, 0x5602893b5df9 \u003cEnvoy::Quic::EnvoyQuicDispatcher::processPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+25\u003e, 0x5602893b1beb \u003cEnvoy::Quic::ActiveQuicListener::onDataWorker(Envoy::Network::UdpRecvData\u0026\u0026)+235\u003e, 0x5602893d8179 \u003cEnvoy::Network::UdpListenerImpl::processPacket(std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, std::unique_ptr\u003cEnvoy::Buffer::Instance, std::default_delete\u003cEnvoy::Buffer::Instance\u003e \u003e, std::chrono::time_point\u003cstd::chrono::_V2::steady_clock, std::chrono::duration\u003clong, std::ratio\u003c1l, 1000000000l\u003e \u003e \u003e)+121\u003e, 0x56028968b661 \u003cEnvoy::Network::passPayloadToProcessor(unsigned long, std::unique_ptr\u003cEnvoy::Buffer::Instance, std::default_delete\u003cEnvoy::Buffer::Instance\u003e \u003e, std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, Envoy::Network::UdpPacketProcessor\u0026, std::chrono::time_point\u003cstd::chrono::_V2::steady_clock, std::chrono::duration\u003clong, std::ratio\u003c1l, 1000000000l\u003e \u003e \u003e)+689\u003e, 0x56028968c541 \u003cEnvoy::Network::Utility::readFromSocket(Envoy::Network::IoHandle\u0026, Envoy::Network::Address::Instance const\u0026, Envoy::Network::UdpPacketProcessor\u0026, std::chrono::time_point\u003cstd::chrono::_V2::steady_clock, std::chrono::duration\u003clong, std::ratio\u003c1l, 1000000000l\u003e \u003e \u003e, bool, unsigned int*)+2801\u003e, 0x56028968d1b4 \u003cEnvoy::Network::Utility::readPacketsFromSocket(Envoy::Network::IoHandle\u0026, Envoy::Network::Address::Instance const\u0026, Envoy::Network::UdpPacketProcessor\u0026, Envoy::TimeSource\u0026, bool, unsigned int\u0026)+276\u003e, 0x5602893d9625 \u003cEnvoy::Network::UdpListenerImpl::handleReadCallback()+293\u003e, 0x5602893d9b2d \u003cEnvoy::Network::UdpListenerImpl::onSocketEvent(short)+381\u003e, 0x56028952cb5e \u003cstd::_Function_handler\u003cvoid(unsigned int), Envoy::Event::DispatcherImpl::createFileEvent(os_fd_t, Envoy::Event::FileReadyCb, Envoy::Event::FileTriggerType, uint32_t)::\u003clambda(uint32_t)\u003e \u003e::_M_invoke(const std::_Any_data \u0026, unsigned int \u0026\u0026)+62\u003e, 0x560289530921 \u003cEnvoy::Event::FileEventImpl::mergeInjectedEventsAndRunCb(unsigned int)+97\u003e, 0x5602896bc922 \u003cevent_process_active_single_queue+1346\u003e, 0x5602896bce47 \u003cevent_base_loop+1079\u003e, 0x560288b48e72 \u003cEnvoy::Server::WorkerImpl::threadRoutine(Envoy::OptRef\u003cEnvoy::Server::GuardDog\u003e, std::function\u003cvoid ()\u003e const\u0026)+418\u003e, 0x5602898531a5 \u003cEnvoy::Thread::ThreadImplPosix::ThreadImplPosix(std::function\u003cvoid ()\u003e, std::optional\u003cEnvoy::Thread::Options\u003e const\u0026)::{lambda(void*)#1}::_FUN(void*)+21\u003e, 0x7f6d613e6173 \u003cstart_thread+723\u003e, 0x4, 0x7f6d2c28cb50, 0x7f6d2c28cb60, 0x7f6d2c28cb30, 0x56028967f424 \u003cEnvoy::Http::HeaderMapImpl::HeaderEntryImpl::HeaderEntryImpl(Envoy::Http::LowerCaseString const\u0026)+52\u003e, 0x17c8455e8508, 0x17c8455e8508, 0x56028a805dd0 \u003cguard variable for Envoy::ConstSingleton\u003cEnvoy::Runtime::RuntimeFeatures\u003e::get()::instance\u003e, 0x17c814f2a3c0, 0x17c8455e8508, 0x56028b11b9f8 \u003ctcmalloc::tcmalloc_internal::Static::cpu_cache_active_\u003e, 0x1000, 0xffffffffffffff98, 0x756e3a006e696769, 0x17c7ff997c10, 0x0, 0x56028a724640 \u003cvtable for Envoy::Router::UpstreamRequest::DownstreamWatermarkManager+16\u003e, 0x17c8455e8500, 0x40fee9e7a03fec00, 0x0, 0x40fee9e7a03fec00, 0x0, 0xfe, 0x17c86c0e9400, 0x5602896b5170 \u003cEnvoy::Buffer::OwnedImpl::add(void const*, unsigned long)\u003e, 0x7f6d2c28cc30, 0x5602896b4ae4 \u003cEnvoy::Buffer::OwnedImpl::addImpl(void const*, unsigned long)+228\u003e, 0x56028847f330 \u003cnon-virtual thunk to Envoy::Http::RequestHeaderMapImpl::setGrpcTimeout(std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e)\u003e, 0x7f6d2c28cb60}, stack_depth_ = 35}\r\n        status = \u003coptimized out\u003e\r\n        __func__ = \"sigHandler\"\r\n#3  \u003csignal handler called\u003e\r\nNo symbol table info available.\r\n#4  quiche::QuicheDataReader::PeekVarInt62Length (this=this@entry=0x7f6d2c28d990) at external/com_github_google_quiche/quiche/common/quiche_data_reader.cc:153\r\n        next = 0x2ae0dedee4fc2702 \u003cerror: Cannot access memory at address 0x2ae0dedee4fc2702\u003e\r\n#5  0x00005602894ceb8a in quic::HttpDecoder::ReadFrameType (this=0x17c7eaff7140, reader=0x7f6d2c28d990) at external/com_github_google_quiche/quiche/quic/core/http/http_decoder.cc:151\r\n        success = \u003coptimized out\u003e\r\n#6  0x00005602894d06c3 in quic::HttpDecoder::ProcessInput (this=this@entry=0x17c7eaff7140, data=\u003coptimized out\u003e, len=18446744073709551377) at external/com_github_google_quiche/quiche/quic/core/http/http_decoder.cc:114\r\n        reader = {\u003cquiche::QuicheDataReader\u003e = {data_ = 0x17c7e4eae0ef \"\", len_ = 18446744073709551377, pos_ = 3089688245975467539, endianness_ = quiche::NETWORK_BYTE_ORDER}, \u003cNo data fields\u003e}\r\n        continue_processing = \u003coptimized out\u003e\r\n#7  0x000056028942cb2b in quic::QuicSpdyStream::OnDataAvailable (this=0x17c7eaff6e00) at external/com_github_google_quiche/quiche/quic/core/http/quic_spdy_stream.cc:859\r\n        processed_bytes = \u003coptimized out\u003e\r\n        iov = {iov_base = 0x17c7e4eae0ef, iov_len = 18446744073709551377}\r\n#8  0x0000560289437afb in quic::QpackDecodedHeadersAccumulator::OnDecodingCompleted (this=0x17c9ba089710) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_decoded_headers_accumulator.cc:63\r\nNo locals.\r\n#9  0x00005602895cec4a in quic::QpackDecoderHeaderTable::InsertEntry (this=0x17c90e6f2a40, name=..., value=...) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_header_table.cc:189\r\n        it = \u003coptimized out\u003e\r\n        observer = 0x17ca518768c8\r\n        index = 38\r\n#10 0x0000560289439b6d in quic::QpackEncoderStreamReceiver::OnInstructionDecoded (this=0x17c90e6f2920, instruction=0x17c851f9ea20) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_encoder_stream_receiver.cc:40\r\nNo locals.\r\n#11 0x000056028943f5f2 in quic::QpackInstructionDecoder::DoStartField (this=0x17c90e6f2930) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_instruction_decoder.cc:109\r\nNo locals.\r\n#12 0x000056028943f750 in quic::QpackInstructionDecoder::Decode (this=0x17c90e6f2930, data=...) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_instruction_decoder.cc:49\r\n        success = true\r\n        bytes_consumed = 0\r\n#13 0x0000560289442035 in quic::QpackReceiveStream::OnDataAvailable (this=0x17c8f5e04000) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_receive_stream.cc:27\r\n        iov = {iov_base = 0x17c86cb185fa, iov_len = 226}\r\n#14 0x000056028947e4eb in quic::QuicStreamSequencer::OnFrameData (this=0x17c8f5e04008, byte_offset=\u003coptimized out\u003e, data_len=226, data_buffer=0x7f6d2c28ee86 \"[redacted]\", \u003cincomplete sequence \\354\\233\u003e) at external/com_github_google_quiche/quiche/quic/core/quic_stream_sequencer.cc:124\r\n        previous_readable_bytes = 0\r\n        bytes_written = 226\r\n        error_details = {static npos = 18446744073709551615, _M_dataplus = {\u003cstd::allocator\u003cchar\u003e\u003e = {\u003c__gnu_cxx::new_allocator\u003cchar\u003e\u003e = {\u003cNo data fields\u003e}, \u003cNo data fields\u003e}, _M_p = 0x7f6d2c28df90 \"\"}, _M_string_length = 0, {_M_local_buf = \"\\000p\\367T\\233\\265X\\346\\337@\\002\\b\\016\\201Ob\", _M_allocated_capacity = 16598216105424023552}}\r\n        result = quic::QUIC_NO_ERROR\r\n        __func__ = \"OnFrameData\"\r\n        stream_unblocked = true\r\n#15 0x000056028949b8a2 in quic::QuicConnection::OnStreamFrame (this=0x17c8b5ade000, frame=...) at external/com_github_google_quiche/quiche/quic/core/quic_connection.cc:1379\r\n        __func__ = \"OnStreamFrame\"\r\n```\r\n\r\nThis crash happens when QUIC stream buffers near 64MB worth of request/response data in its circular receive buffer and then starts to push data to the decoder. The excessive buffering is likely due to head of line blocking in Qpack decoding in QUICHE or slow Envoy decoding pipeline. The receive buffer is a circular buffer of 1024 memory blocks of 8KB each. The following access to the receive buffer will be located in the same memory block which the last received byte lands. In this case the peeked memory length will be calculated wrongly with a lower end offset - higher start offset which causes integer under flow.\r\n\r\n### PoC\r\nHack a QUIC client implementation to send a large `POST` request (\u003e 128MB) which reference to a request header in Qpack dynamic table. Do not send Qpack table update instructions. After the stream gets flow control blocked, send the Qpack table update.\r\n\r\n### Impact\r\nEnvoy users who has configured HTTP/3 upstream or downstream are vulnerable.\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.27.6"
            },
            {
              "introduced": "1.28.0"
            },
            {
              "fixed": "1.28.4"
            },
            {
              "introduced": "1.29.0"
            },
            {
              "fixed": "1.29.5"
            },
            {
              "introduced": "1.30.0"
            },
            {
              "fixed": "1.30.2"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "envoyproxy",
        "source_package": "QUIC"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-g9mq-6v96-cpqc"
    }
  ]
}