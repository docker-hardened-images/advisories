{
  "modified": "2020-06-30T20:42:22Z",
  "published": "2020-06-30T20:42:22Z",
  "schema_version": "1.5.0",
  "id": "CVE-2020-12604",
  "aliases": [
    "GHSA-8hf8-8gvw-ggvx"
  ],
  "details": "## Vulnerability type\r\nUncontrolled Resource Consumption\r\n\r\n## Attack type\r\nRemote\r\n\r\n## Impact\r\nDenial-of-service, Resource consumption (memory)\r\n\r\n## Discoverer(s)/Credits\r\nAn OOM issue was initially reported by Bartosz Borkowski (https://github.com/envoyproxy/envoy/issues/9891). After investigating the reported issue, Matt Klein discovered the (assumed) root cause.\r\n\r\n## Description\r\nEnvoy employs HTTP/2 stream flow control as configured by the `initial_stream_window_size` setting that can be configured both on downstream HTTP listeners as well as upstream HTTP clusters. Envoy also limits the number of simultaneous downstream streams as configured by the `max_concurrent_streams` setting.\r\n\r\nEnvoy can consume and never release stream memory in the following case:\r\nUntrusted client opens streams up to the `max_concurrent_streams` limit.\r\nUntrusted client requests a resource that will generate a large response.\r\nDepending on the configuration of `initial_stream_window_size` for the upstream cluster, Envoy will buffer approximately that amount of memory on behalf of the stream.\r\nIf the downstream client does not open receive window, Envoy will start flow control and stop allowing data from upstream.\r\nHowever, there existed a case in which Envoy would receive the final data of the stream from upstream (pending window), but not have enough open window to send the data to downstream. This data would be buffered forever and not covered by any timeout.\r\n\r\nThe effectiveness of this attack is limited by both the  `max_concurrent_streams` and `initial_stream_window_size` settings. However, a malicious client with knowledge of backend configuration may be able to craft a sequence of connections and streams that would cause Envoy to use substantial memory and never free it. (By opening up `max_concurrent_streams` - 1 streams per connection and using the final stream for normal periodic requests, the connection idle timer would never fire.)\r\n\r\nThe fix for this CVE is that Envoy will now use the `stream_idle_timeout` to cover the final data flush in which data may be buffered pending available downstream window. If downstream window is never opened, Envoy will reset the stream and release the buffered data once the idle timeout fires.",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "1.12.4"
            },
            {
              "fixed": "1.12.5"
            },
            {
              "introduced": "1.13.2"
            },
            {
              "fixed": "1.13.3"
            },
            {
              "introduced": "1.14.0"
            },
            {
              "fixed": "1.14.3"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "",
        "source_package": ""
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-8hf8-8gvw-ggvx"
    }
  ]
}