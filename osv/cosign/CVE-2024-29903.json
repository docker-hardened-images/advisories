{
  "modified": "2024-04-10T22:13:12Z",
  "published": "2024-04-10T22:13:12Z",
  "schema_version": "1.5.0",
  "id": "CVE-2024-29903",
  "aliases": [
    "GHSA-95pr-fxf5-86gv"
  ],
  "details": "Maliciously-crafted software artifacts can cause denial of service of the machine running Cosign, thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates.  \r\n\r\nAs an example, these lines demonstrate the problem:\r\n\r\nhttps://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70 \r\n\r\nThis `Get()` method gets the manifest of the image, allocates a slice equal to the length of the layers in the manifest, loops through the layers and adds a new signature to the slice.\r\n\r\nThe exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. \r\n\r\n## Remediation\r\n\r\nUpdate to the latest version of Cosign, where the number of attestations, signatures and manifests has been limited to a reasonable value.\r\n\r\n## Cosign PoC\r\n\r\nIn the case of this API (also referenced above):\r\n\r\nhttps://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70\r\n\r\n… The first line can contain a length that is safe for the system and will not throw a runtime panic or be blocked by other safety mechanisms. For the sake of argument, let’s say that the length of `m, err := s.Manifest()` is the max allowed (by the machine without throwing OOM panics) manifests minus 1. When Cosign then allocates a new slice on this line: `signatures := make([]oci.Signature, 0, len(m.Layers))`, Cosign will allocate more memory than is available and the machine will be denied of service, causing Cosign and all other services on the machine to be unavailable.\r\n\r\nTo illustrate the issue here, we run a modified version of `TestSignedImageIndex()` in `pkg/oci/remote`:\r\n\r\nhttps://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/oci/remote/index_test.go#L31-L57\r\n\r\nHere, `wantLayers` is the number of manifests from these lines:\r\n\r\nhttps://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L60\r\n\r\nTo test this, we want to make `wantLayers` high enough to not cause a memory on its own but still trigger the machine-wide OOM when a slice gets create with the same length. On my local machine, it would take hours to create a slice of layers that fulfils that criteria, so instead I modify the Cosign production code to reflect a long list of manifests:\r\n\r\n```golang\r\n// Get implements oci.Signatures\r\nfunc (s *sigs) Get() ([]oci.Signature, error) {\r\n        m, err := s.Manifest()\r\n        if err != nil {\r\n                return nil, err\r\n        }\r\n        // Here we imitate a long list of manifests\r\n        ms := make([]byte, 2600000000) // imitate a long list of manifests\r\n        signatures := make([]oci.Signature, 0, len(ms))\r\n        panic(\"Done\")\r\n        //signatures := make([]oci.Signature, 0, len(m.Layers))\r\n        for _, desc := range m.Layers {\r\n```\r\n\r\nWith this modified code, if we can cause an OOM without triggering the `panic(\"Done\")`, we have succeeded.",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "cosign",
        "purl": "pkg:dhi/cosign"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "2.2.4"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "go",
        "source_package": "github.com/sigstore/cosign"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv"
    }
  ]
}