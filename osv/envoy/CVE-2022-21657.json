{
  "modified": "2022-02-22T21:14:48Z",
  "published": "2022-02-22T21:14:48Z",
  "schema_version": "1.5.0",
  "id": "CVE-2022-21657",
  "aliases": [
    "GHSA-837m-wjrv-vm5g"
  ],
  "details": "CVSS Score 3.1 AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N, Low\r\n\r\nEnvoy does not restrict the set of certificates it accepts from the peer, either as a TLS client or a TLS server, to only those certificates that contain the necessary extendedKeyUsage (id-kp-serverAuth and id-kp-clientAuth, respectively)\r\n\r\nThis means that a peer may present an e-mail certificate (e.g. id-kp-emailProtection), either as a leaf certificate or as a CA in the chain, and it will be accepted for TLS. This is particularly bad when combined with #630 , in that it allows a Web PKI CA that is intended only for use with S/MIME, and thus exempted from audit or supervision, to issue TLS certificates that will be accepted by Envoy.\r\n\r\n### Impact\r\nEnvoy will trust upstream certificates that should not be trusted.\r\n\r\n### Patches\r\n\r\n\r\n### Workarounds\r\nNone.\r\n\r\n### References\r\nhttps://blog.envoyproxy.io\r\nhttps://github.com/envoyproxy/envoy/releases\r\n\r\n### For more information\r\nOpen an issue in [Envoy repo](https://github.com/envoyproxy/envoy/issues)\r\nEmail us at [envoy-security](https://github.com/envoyproxy/envoy/security/advisories/envoy-security@googlegroups.com)\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: and.0",
        "source_ecosystem": "c++",
        "source_package": "envoy"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-837m-wjrv-vm5g"
    }
  ]
}