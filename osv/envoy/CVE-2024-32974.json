{
  "modified": "2024-06-04T19:39:08Z",
  "published": "2024-06-04T19:39:08Z",
  "schema_version": "1.5.0",
  "id": "CVE-2024-32974",
  "aliases": [
    "GHSA-mgxp-7hhp-8299"
  ],
  "details": "### Summary\r\nA crash was observed in `EnvoyQuicServerStream::OnInitialHeadersComplete()` with following call stack. It is a use-after-free caused by QUICHE continuing push request headers after `StopReading()` being called on the stream. As after `StopReading()`, the HCM's `ActiveStream` might have already be destroyed and any up calls from QUICHE could potentially cause use after free.\r\n\r\n### Details\r\n```console\r\n#0  0x00007f9f9fbc9f7c in pthread_kill@@GLIBC_2.34 () from /usr/drte/v5/lib64/libc.so.6\r\nNo symbol table info available.\r\n#1  0x00007f9f9fb78f22 in raise () from /usr/drte/v5/lib64/libc.so.6\r\nNo symbol table info available.\r\n#2  0x000056431657e33f in Envoy::SignalAction::sigHandler (sig=11, info=\u003coptimized out\u003e, context=0x7f9f7227dd00) at external/envoy/source/common/signal/signal_action.cc:53\r\n        tracer = {\u003cEnvoy::Logger::Loggable\u003c(Envoy::Logger::Id)4\u003e\u003e = {\u003cNo data fields\u003e}, static log_to_stderr_ = false, static MaxStackDepth = 64, stack_trace_ = {0x564316317acf \u003cquic::QuicSpdyStream::OnHeadersDecoded(quic::QuicHeaderList, bool)+271\u003e, 0x56431631dafb \u003cquic::QpackDecodedHeadersAccumulator::OnDecodingCompleted()+107\u003e, 0x5643164b4c4a \u003cquic::QpackDecoderHeaderTable::InsertEntry(std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e, std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e)+90\u003e, 0x56431631fb9d \u003cquic::QpackEncoderStreamReceiver::OnInstructionDecoded(quic::QpackInstruction const*)+157\u003e, 0x5643163255f2 \u003cquic::QpackInstructionDecoder::DoStartField()+626\u003e, 0x564316325750 \u003cquic::QpackInstructionDecoder::Decode(std::basic_string_view\u003cchar, std::char_traits\u003cchar\u003e \u003e)+288\u003e, 0x564316328035 \u003cquic::QpackReceiveStream::OnDataAvailable()+117\u003e, 0x5643163644eb \u003cquic::QuicStreamSequencer::OnFrameData(unsigned long, unsigned long, char const*)+843\u003e, 0x5643163818a2 \u003cquic::QuicConnection::OnStreamFrame(quic::QuicStreamFrame const\u0026)+626\u003e, 0x5643163d3c6c \u003cquic::QuicFramer::ProcessIetfFrameData(quic::QuicDataReader*, quic::QuicPacketHeader const\u0026, quic::EncryptionLevel)+460\u003e, 0x5643163d518b \u003cquic::QuicFramer::ProcessIetfDataPacket(quic::QuicDataReader*, quic::QuicPacketHeader*, quic::QuicEncryptedPacket const\u0026, char*, unsigned long)+2491\u003e, 0x5643163d549a \u003cquic::QuicFramer::ProcessPacketInternal(quic::QuicEncryptedPacket const\u0026)+458\u003e, 0x5643163d55d8 \u003cquic::QuicFramer::ProcessPacket(quic::QuicEncryptedPacket const\u0026)+24\u003e, 0x56431638c1d2 \u003cquic::QuicConnection::ProcessUdpPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+1010\u003e, 0x56431634f224 \u003cquic::QuicSession::ProcessUdpPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+84\u003e, 0x5643162e9d2d \u003cEnvoy::Quic::EnvoyQuicServerSession::ProcessUdpPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+61\u003e, 0x5643162ab5fd \u003cquic::QuicDispatcher::MaybeDispatchPacket(quic::ReceivedPacketInfo const\u0026)+429\u003e, 0x5643162ae094 \u003cquic::QuicDispatcher::ProcessPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+308\u003e, 0x56431629bdf9 \u003cEnvoy::Quic::EnvoyQuicDispatcher::processPacket(quic::QuicSocketAddress const\u0026, quic::QuicSocketAddress const\u0026, quic::QuicReceivedPacket const\u0026)+25\u003e, 0x564316297beb \u003cEnvoy::Quic::ActiveQuicListener::onDataWorker(Envoy::Network::UdpRecvData\u0026\u0026)+235\u003e, 0x5643162be179 \u003cEnvoy::Network::UdpListenerImpl::processPacket(std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, std::unique_ptr\u003cEnvoy::Buffer::Instance, std::default_delete\u003cEnvoy::Buffer::Instance\u003e \u003e, std::chrono::time_point\u003cstd::chrono::_V2::steady_clock, std::chrono::duration\u003clong, std::ratio\u003c1l, 1000000000l\u003e \u003e \u003e)+121\u003e, 0x564316571661 \u003cEnvoy::Network::passPayloadToProcessor(unsigned long, std::unique_ptr\u003cEnvoy::Buffer::Instance, std::default_delete\u003cEnvoy::Buffer::Instance\u003e \u003e, std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, std::shared_ptr\u003cEnvoy::Network::Address::Instance const\u003e, Envoy::Network::UdpPacketProcessor\u0026, std::chrono::time_point\u003cstd::chrono::_V2::steady_clock, std::chrono::duration\u003clong, std::ratio\u003c1l, 1000000000l\u003e \u003e \u003e)+689\u003e, 0x564316572d25 \u003cEnvoy::Network::Utility::readFromSocket(Envoy::Network::IoHandle\u0026, Envoy::Network::Address::Instance const\u0026, Envoy::Network::UdpPacketProcessor\u0026, std::chrono::time_point\u003cstd::chrono::_V2::steady_clock, std::chrono::duration\u003clong, std::ratio\u003c1l, 1000000000l\u003e \u003e \u003e, bool, unsigned int*)+4821\u003e, 0x5643165731b4 \u003cEnvoy::Network::Utility::readPacketsFromSocket(Envoy::Network::IoHandle\u0026, Envoy::Network::Address::Instance const\u0026, Envoy::Network::UdpPacketProcessor\u0026, Envoy::TimeSource\u0026, bool, unsigned int\u0026)+276\u003e, 0x5643162bf625 \u003cEnvoy::Network::UdpListenerImpl::handleReadCallback()+293\u003e, 0x5643162bfb2d \u003cEnvoy::Network::UdpListenerImpl::onSocketEvent(short)+381\u003e, 0x564316412b5e \u003cstd::_Function_handler\u003cvoid(unsigned int), Envoy::Event::DispatcherImpl::createFileEvent(os_fd_t, Envoy::Event::FileReadyCb, Envoy::Event::FileTriggerType, uint32_t)::\u003clambda(uint32_t)\u003e \u003e::_M_invoke(const std::_Any_data \u0026, unsigned int \u0026\u0026)+62\u003e, 0x564316416921 \u003cEnvoy::Event::FileEventImpl::mergeInjectedEventsAndRunCb(unsigned int)+97\u003e, 0x5643165a2922 \u003cevent_process_active_single_queue+1346\u003e, 0x5643165a2e47 \u003cevent_base_loop+1079\u003e, 0x564315a2ee72 \u003cEnvoy::Server::WorkerImpl::threadRoutine(Envoy::OptRef\u003cEnvoy::Server::GuardDog\u003e, std::function\u003cvoid ()\u003e const\u0026)+418\u003e, 0x5643167391a5 \u003cEnvoy::Thread::ThreadImplPosix::ThreadImplPosix(std::function\u003cvoid ()\u003e, std::optional\u003cEnvoy::Thread::Options\u003e const\u0026)::{lambda(void*)#1}::_FUN(void*)+21\u003e, 0x7f9f9fbc8173 \u003cstart_thread+723\u003e, 0x5643163b9b0b \u003cquic::QuicPacketCreator::ExpansionOnNewFrameWithLastFrame(quic::QuicFrame const\u0026, quic::QuicTransportVersion)+43\u003e, 0x7f9f7227dbf0, 0x5643163ba704 \u003cquic::QuicPacketCreator::BytesFree() const+36\u003e, 0x7f9f7227de30, 0x5643163bb726 \u003cquic::QuicPacketCreator::CreateStreamFrame(unsigned int, unsigned long, unsigned long, bool, quic::QuicFrame*)+246\u003e, 0x70001000a, 0x0, 0x18c09a, 0x6b2f, 0xcd37, 0x83ac0, 0x10a9, 0x0, 0x631, 0x31f, 0x0, 0x0, 0x70001000a, 0x5fd046e0b387700, 0x1, 0x45584f077340, 0x564317efe6d8 \u003ctcmalloc::tcmalloc_internal::Static::page_allocator_+5304\u003e, 0x1, 0xdc, 0x564317efd220 \u003ctcmalloc::tcmalloc_internal::Static::page_allocator_\u003e, 0x7f9f7227dcc0, 0x564316c06625 \u003ctcmalloc::tcmalloc_internal::HugePageFiller\u003ctcmalloc::tcmalloc_internal::PageTracker\u003c\u0026tcmalloc::tcmalloc_internal::SystemRelease\u003e \u003e::Put(tcmalloc::tcmalloc_internal::PageTracker\u003c\u0026tcmalloc::tcmalloc_internal::SystemRelease\u003e*, tcmalloc::tcmalloc_internal::PageId, tcmalloc::tcmalloc_internal::Length)+949\u003e, 0x7f9f7227dce0, 0x1, 0x45584f077340, 0x564317efd220 \u003ctcmalloc::tcmalloc_internal::Static::page_allocator_\u003e}, stack_depth_ = 33}\r\n        status = \u003coptimized out\u003e\r\n        __func__ = \"sigHandler\"\r\n#3  \u003csignal handler called\u003e\r\nNo symbol table info available.\r\n#4  0x00005643162f13d5 in Envoy::Quic::EnvoyQuicServerStream::OnInitialHeadersComplete (this=0x4557eee87500, fin=\u003coptimized out\u003e, frame_len=\u003coptimized out\u003e, header_list=...) at external/envoy/source/common/quic/envoy_quic_server_stream.cc:304\r\n        __func__ = \"OnInitialHeadersComplete\"\r\n        rst = quic::QUIC_STREAM_NO_ERROR\r\n        server_session = \u003coptimized out\u003e\r\n        headers = {_M_t = {\u003cstd::__uniq_ptr_impl\u003cEnvoy::Http::RequestHeaderMapImpl, std::default_delete\u003cEnvoy::Http::RequestHeaderMapImpl\u003e \u003e\u003e = {_M_t = {\u003cstd::_Tuple_impl\u003c0, Envoy::Http::RequestHeaderMapImpl*, std::default_delete\u003cEnvoy::Http::RequestHeaderMapImpl\u003e \u003e\u003e = {\u003cstd::_Tuple_impl\u003c1, std::default_delete\u003cEnvoy::Http::RequestHeaderMapImpl\u003e \u003e\u003e = {\u003cstd::_Head_base\u003c1, std::default_delete\u003cEnvoy::Http::RequestHeaderMapImpl\u003e, true\u003e\u003e = {_M_head_impl = {\u003cNo data fields\u003e}}, \u003cNo data fields\u003e}, \u003cstd::_Head_base\u003c0, Envoy::Http::RequestHeaderMapImpl*, false\u003e\u003e = {_M_head_impl = 0x455724410c80}, \u003cNo data fields\u003e}, \u003cNo data fields\u003e}}, \u003cNo data fields\u003e}}\r\n#5  0x0000564316317acf in quic::QuicSpdyStream::OnHeadersDecoded (this=0x4557eee87500, headers=..., header_list_size_limit_exceeded=\u003coptimized out\u003e) at external/com_github_google_quiche/quiche/quic/core/http/quic_spdy_stream.cc:592\r\n        debug_visitor = 0x0\r\n#6  0x000056431631dafb in quic::QpackDecodedHeadersAccumulator::OnDecodingCompleted (this=0x4557407d0d80) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_decoded_headers_accumulator.cc:63\r\nNo locals.\r\n#7  0x00005643164b4c4a in quic::QpackDecoderHeaderTable::InsertEntry (this=0x45593a6b7340, name=..., value=...) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_header_table.cc:189\r\n        it = \u003coptimized out\u003e\r\n        observer = 0x45591781ab48\r\n        index = 29\r\n#8  0x000056431631fb9d in quic::QpackEncoderStreamReceiver::OnInstructionDecoded (this=0x45593a6b7220, instruction=0x4557499d5a80) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_instruction_decoder.h:74\r\nNo locals.\r\n#9  0x00005643163255f2 in quic::QpackInstructionDecoder::DoStartField (this=0x45593a6b7230) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_instruction_decoder.cc:109\r\nNo locals.\r\n#10 0x0000564316325750 in quic::QpackInstructionDecoder::Decode (this=0x45593a6b7230, data=...) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_instruction_decoder.cc:49\r\n        success = true\r\n        bytes_consumed = 0\r\n#11 0x0000564316328035 in quic::QpackReceiveStream::OnDataAvailable (this=0x45591f446480) at external/com_github_google_quiche/quiche/quic/core/qpack/qpack_receive_stream.cc:27\r\n        iov = {iov_base = 0x4558cfa84005, iov_len = 1859}\r\n#12 0x00005643163644eb in quic::QuicStreamSequencer::OnFrameData (this=0x45591f446488, byte_offset=\u003coptimized out\u003e, data_len=1194, data_buffer=0x7f9f7227fe85 \"[redacted]\") at external/com_github_google_quiche/quiche/quic/core/quic_stream_sequencer.cc:124\r\n        previous_readable_bytes = 0\r\n        bytes_written = 1194\r\n        error_details = {static npos = 18446744073709551615, _M_dataplus = {\u003cstd::allocator\u003cchar\u003e\u003e = {\u003c__gnu_cxx::new_allocator\u003cchar\u003e\u003e = {\u003cNo data fields\u003e}, \u003cNo data fields\u003e}, _M_p = 0x7f9f7227ef90 \"\"}, _M_string_length = 0, {_M_local_buf = \"[redacted]\", _M_allocated_capacity = 9845652197662656768}}\r\n        result = quic::QUIC_NO_ERROR\r\n        __func__ = \"OnFrameData\"\r\n        stream_unblocked = true\r\n#13 0x00005643163818a2 in quic::QuicConnection::OnStreamFrame (this=0x455821998000, frame=...) at external/com_github_google_quiche/quiche/quic/core/quic_connection.cc:1379\r\n        __func__ = \"OnStreamFrame\"\r\n#14 0x00005643163d3c6c in quic::QuicFramer::ProcessIetfFrameData (this=0x455821998070, reader=0x7f9f7227fa50, header=..., decrypted_level=quic::ENCRYPTION_FORWARD_SECURE) at external/com_github_google_quiche/quiche/quic/core/quic_framer.cc:2842\r\n        frame = {\u003cquic::QuicInlinedFrame\u003cquic::QuicStreamFrame\u003e\u003e = {\u003cNo data fields\u003e}, type = quic::STREAM_FRAME, fin = false, data_length = 1194, stream_id = 6, data_buffer = 0x7f9f7227fe85 \"[redacted]\", offset = 5}\r\n        frame_type = 14\r\n        encoded_bytes = \u003coptimized out\u003e\r\n        connection_context = 0x455821998048\r\n#15 0x00005643163d518b in quic::QuicFramer::ProcessIetfDataPacket (this=0x455821998070, encrypted_reader=\u003coptimized out\u003e, header=0x7f9f7227fc40, packet=..., decrypted_buffer=0x7f9f7227fe80 \"[redacted]\", buffer_length=1472) at external/com_github_google_quiche/quiche/quic/core/quic_framer.cc:1915\r\n```\r\n\r\nThe `EnvoyQuicServerStream` received a request header referencing a new Qpack dynamic table entry which hasn't arrived yet. And then it received a `STOP_SENDING` frame and thus called `StopReading()` to drop incoming request and called HCM reset callback. And the arrival of the Qpack dynamic table entry (`QpackReceiveStream::OnDataAvailable()` in the crash stack) causes the request header to be decoded and calls `EnvoyQuicServerStream::OnInitialHeadersComplete()` which accessing the destroyed HCM `ActiveStream` object.\r\n\r\n### PoC\r\nHack a QUIC client implementation to send a request with headers referencing Qpack dynamic table and `STOP_SENDING` frame. Meanwhile stop the Qpack encoder stream from writing any payload. Wait for all `ACK`s to arrive, and then unblock Qpack encoder stream from writing.\r\n\r\n### Impact\r\nEnvoy users who have configured HTTP/3 downstream.\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.27.6"
            },
            {
              "introduced": "1.28.0"
            },
            {
              "fixed": "1.28.4"
            },
            {
              "introduced": "1.29.0"
            },
            {
              "fixed": "1.29.5"
            },
            {
              "introduced": "1.30.0"
            },
            {
              "fixed": "1.30.2"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "envoyproxy",
        "source_package": "QUIC"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-mgxp-7hhp-8299"
    }
  ]
}