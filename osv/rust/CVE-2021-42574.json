{
  "modified": "2021-11-01T07:29:00Z",
  "published": "2021-11-01T00:07:48Z",
  "schema_version": "1.5.0",
  "id": "CVE-2021-42574",
  "aliases": [
    "GHSA-rcv6-wg5m-24v6"
  ],
  "details": "\u003e This is a lightly edited cross-post of [the official security advisory][advisory]. The\r\n\u003e official advisory contains a signed version with our PGP key, as well.\r\n\r\n[advisory]: https://groups.google.com/g/rustlang-security-announcements/c/bKPH8XYMvJU\r\n\r\nThe Rust Security Response WG was notified of a security concern affecting\r\nsource code containing \"bidirectional override\" Unicode codepoints: in some\r\ncases the use of those codepoints could lead to the reviewed code being\r\ndifferent than the compiled code.\r\n\r\nThis is an issue with how source code may be rendered in certain contexts, and\r\nits assigned identifier is [CVE-2021-42574]. While the issue itself is not a flaw\r\nin rustc, we're taking proactive measures to mitigate its impact on Rust developers.\r\n\r\n## Overview\r\n\r\nUnicode has support for both left-to-right and right-to-left languages, and to\r\naid writing left-to-right words inside a right-to-left sentence (or vice versa)\r\nit also features invisible codepoints called \"bidirectional override\".\r\n\r\nThese codepoints are normally used across the Internet to embed a word inside a\r\nsentence of another language (with a different text direction), but it was\r\nreported to us that they could be used to manipulate how source code is\r\ndisplayed in some editors and code review tools, leading to the reviewed code\r\nbeing different than the compiled code. This is especially bad if the whole\r\nteam relies on bidirectional-aware tooling.\r\n\r\nAs an example, the following snippet (with `{U+NNNN}` replaced with the Unicode\r\ncodepoint `NNNN`):\r\n\r\n```rust\r\nif access_level != \"user{U+202E} {U+2066}// Check if admin{U+2069} {U+2066}\" {\r\n```\r\n\r\n...would be rendered by bidirectional-aware tools as:\r\n\r\n```rust\r\nif access_level != \"user\" { // Check if admin\r\n```\r\n\r\n## Affected Versions\r\n\r\nRust 1.56.1 introduces two new lints to detect and reject code containing the\r\naffected codepoints. Rust 1.0.0 through Rust 1.56.0 do not include such lints,\r\nleaving your source code vulnerable to this attack if you do not perform\r\nout-of-band checks for the presence of those codepoints.\r\n\r\nTo assess the security of the ecosystem we analyzed all crate versions ever\r\npublished on crates.io (as of 2021-10-17), and only 5 crates have the affected\r\ncodepoints in their source code, with none of the occurrences being malicious.\r\n\r\n## Mitigations\r\n\r\nWe will be releasing Rust 1.56.1 today, 2021-11-01, with two new\r\ndeny-by-default lints detecting the affected codepoints, respectively in string\r\nliterals and in comments. The lints will prevent source code files containing\r\nthose codepoints from being compiled, protecting you from the attack.\r\n\r\nIf your code has legitimate uses for the codepoints we recommend replacing them\r\nwith the related escape sequence. The error messages will suggest the right\r\nescapes to use.\r\n\r\nIf you can't upgrade your compiler version, or your codebase also includes\r\nnon-Rust source code files, we recommend periodically checking that the\r\nfollowing codepoints are not present in your repository and your dependencies:\r\nU+202A, U+202B, U+202C, U+202D, U+202E, U+2066, U+2067, U+2068, U+2069.\r\n\r\n## Timeline of events\r\n\r\n* 2021-07-25: we received the report and started working on a fix.\r\n* 2021-09-14: the date for the embargo lift (2021-11-01) is communicated to us.\r\n* 2021-10-17: performed an analysis of all the source code ever published to\r\n  crates.io to check for the presence of this attack.\r\n* 2021-11-01: embargo lifts, the vulnerability is disclosed and Rust 1.56.1 is\r\n  released.\r\n\r\n## Acknowledgments\r\n\r\nThanks to [Nicholas Boucher][1] and [Ross Anderson][2] from the University of\r\nCambridge for disclosing this to us according to our [security policy][3]!\r\n\r\nWe also want to thank the members of the Rust project who contributed to the\r\nmitigations for this issue. Thanks to Esteban KÃ¼ber for developing the lints,\r\nPietro Albini for leading the security response, and many others for their\r\ninvolvement, insights and feedback: Josh Stone, Josh Triplett, Manish\r\nGoregaokar, Mara Bos, Mark Rousskov, Niko Matsakis, and Steve Klabnik.\r\n\r\n## Appendix: Homoglyph attacks\r\n\r\nAs part of their research, Nicholas Boucher and Ross Anderson also uncovered a\r\nsimilar security issue identified as [CVE-2021-42694] involving homoglyphs inside\r\nidentifiers. Rust already includes mitigations for that attack since Rust\r\n1.53.0. Rust 1.0.0 through Rust 1.52.1 is not affected due to the lack of\r\nsupport for non-ASCII identifiers in those releases.\r\n\r\n[1]: https://github.com/nickboucher\r\n[2]: https://www.cl.cam.ac.uk/~rja14\r\n[3]: https://www.rust-lang.org/policies/security\r\n\r\n[CVE-2021-42574]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574\r\n[CVE-2021-42694]: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42694\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "rust",
        "purl": "pkg:dhi/rust"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.56.1"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "rust",
        "source_package": "rustc"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/rust-lang/rust/security/advisories/GHSA-rcv6-wg5m-24v6"
    }
  ]
}