{
  "modified": "2022-02-22T21:27:58Z",
  "published": "2022-02-22T21:14:35Z",
  "schema_version": "1.5.0",
  "id": "CVE-2022-21656",
  "aliases": [
    "GHSA-c9g7-xwcv-pjx2"
  ],
  "details": "### Summary\r\n\r\nA certificate authentication bypass allows malformed certificates issued by a malicious CA to be accepted as valid for a host.\r\n\r\n### Description\r\nThe API for matching Subject Alternative Names in X.509 certificates does not take into consideration the Subject Alternative Name type. A malicious CA that issues a malformed certificate, such as encoding a DNS hostname within an rfc822Name Subject Alternative Name or an email address within a uniformResourceIndicator Subject Alternative Name, will have that certificate successfully match against the configured name. Due to the malformed nature of the certificate, this may result in bypassing configured constraints, such as nameConstraints that restrict which DNS hostnames or email addresses a CA may issue for.\r\n\r\nCVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N, Low\r\n\r\n### Impact\r\n\r\nThis may allow for monster-in-the-middle attacks for Envoy users that rely on the X.509 nameConstraints extension to restrict the capabilities for CAs. This includes users who use common, commercially-available CAs that issue widely-trusted certificates, as they rely on nameConstraints to technically constrain subordinate CAs. Users that use enterprise-managed CAs and which do not use nameConstraints to restrict access to CAs may not be affected, as they already completely trust the CA to not issue malformed certificates.\r\n\r\n### Patches\r\n\r\nEnvoy version 1.20.1 adds the ability to specify type of SAN along with the value to match against.\r\n\r\nIMPORTANT: Further action is required after upgrading to the patched version. Replace all usage of [envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names](https://github.com/envoyproxy/envoy/blob/9d5627a0879b0a029e90515137c108e1d2884bfc/api/envoy/extensions/transport_sockets/tls/v3/common.proto#L454) with [envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names](https://github.com/envoyproxy/envoy/blob/9d5627a0879b0a029e90515137c108e1d2884bfc/api/envoy/extensions/transport_sockets/tls/v3/common.proto#L450) which will ensure the matching considers the type of Subject Alternative Name in use, as well as all appropriate nameConstraints.\r\n\r\n### Workarounds\r\nNone.\r\n\r\n### References\r\nhttps://blog.envoyproxy.io\r\nhttps://github.com/envoyproxy/envoy/releases\r\n\r\n### For more information\r\nOpen an issue in [Envoy repo](https://github.com/envoyproxy/envoy/issues)\r\nEmail us at [envoy-security](https://github.com/envoyproxy/envoy/security/advisories/envoy-security@googlegroups.com)\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: and.0",
        "source_ecosystem": "c++",
        "source_package": "envoy"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-c9g7-xwcv-pjx2"
    }
  ]
}