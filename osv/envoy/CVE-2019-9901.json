{
  "modified": "2019-11-08T18:16:53Z",
  "published": "2019-11-08T18:16:53Z",
  "schema_version": "1.5.0",
  "id": "CVE-2019-9901",
  "aliases": [
    "GHSA-xcx5-93pw-jw2w"
  ],
  "details": "# CVE-2019-9901\r\n\r\n## Brief description\r\n\r\nEnvoy does not normalize HTTP URL paths in Envoy 1.9 and before. A remote attacker may craft a path with a relative path, e.g. something/../admin, to bypass access control, e.g. a block on /admin. A backend server could then interpret the unnormalized path and provide an attacker access beyond the scope provided for by the access control policy.\r\n\r\n## CVSS\r\n\r\n[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L) (8.3, High)\r\n\r\n## Affected version(s)\r\n\r\nEnvoy 1.9.0 and before.\r\n\r\n## Affected component(s)\r\n\r\nRBAC, HTTP router, external authorization, rate limiting service, likely others.\r\n\r\n## Attack vector(s)\r\n\r\nRelative path URLs delivered by untrusted client.\r\n\r\n## Discover(s)/Credits\r\n\r\nErlend Oftedal\t\r\n\r\n## Example exploit or proof-of-concept\r\n\r\n1. Envoy’s RBAC filter is configured to only allow a prefix match of “/info/” to entity X.\r\n2. X sends “/info/../private”, the RBAC filter will allow access.\r\n3. The backend normalizes the path per RFC 3986 and provides access to “/private”.\r\n\r\nNote that this is not limited to RBAC, anywhere that paths are handled in Envoy, the unnormalized variant is used, including route matching, ext_authz and the rate limiting service.\r\n\r\n## Details\r\n\r\nNetwork proxies such as Envoy make decisions on access control and routing based on path component of a request URL. RFC 3986 describes [URL normalization and comparison](https://tools.ietf.org/html/rfc3986#section-6); if a proxy makes a decision based on a unnormalized view of a path, and the backend or operator intent at configuration is that this decision reflects the normalized view, it is possible for an attacker to bypass the intent of the access control or routing policy. For example, “/info/../private” will match a prefix match of “/info/” but implies “/private”. This is a classic path traversal attack.\r\n\r\nThe unnormalized view of the path is used for routing and all L7 filter execution, including RBAC, ext_authz and the rate limiting service. This allows bypass of access control and could also be used to circumvent DoS prevention systems such as rate limiting and authorization for a given backend server.\r\n\r\nThe fix in Envoy 1.9.1 allows optional URL normalization (via a port of the relevant parts of the Chromium URL library to Envoy) in the HTTP Connection Manager. If enabled, this applies shortly after request decoding and before any routing decision is made or filter executed. The normalized URL is used in the rest of the L7 data pipeline and presented to the backend as the intended path. The fix in Envoy applies [percent-encoded normalization](https://tools.ietf.org/html/rfc3986#section-6.2.2.2) and [path segment normalization](https://tools.ietf.org/html/rfc3986#section-6.2.2.3), but not [case normalization](https://tools.ietf.org/html/rfc3986#section-6.2.2.1); it is unlikely that match rules will depend on the case of percent-encoded characters and the Chromium URL library does not support this.\r\n\r\nIn Envoy 1.9.1, this fix is opt-in (in the interest of not breaking existing users) and must be enabled via the HTTP Connection Manager configuration field HttpConnectionManager.normalize_path. There is also a runtime option http_connection_manager.normalize_path to enable normalization. Note: the path forwarded to the upstream will be also normalized when this setting is enabled.\r\n\r\nOther proxies, e.g. Nginx, have a distinction between normalization that occurs for the purpose of matching and normalization that is applied as a transform to a path when forwarding to the backend. Future versions of Envoy may introduce such a distinction and default to RFC 3986 normalization for the purpose of matching.\r\n\r\n## Mitigations\r\n\r\nOne of the most direct potential exploits with path traversal is via prefix based path matching. Avoiding this both in Envoy and external servers such as ext_authz will avoid one possible common attack, but not all, since an exact match on headers with ext_authz in a “deny” rule can also be bypassed. Suffix match rules should be largely safe, although the backend remains unprotected from this invalid input. Regular expression matches will largely depend on the contents of the regular expression.\r\n\r\nExternal data plane sidecall servers such as ext_authz that interact with Envoy supplied headers can be modified to detect and reject requests with relative path components or perform their own path normalization.\r\n\r\n## Detection\r\n\r\nEnvoy’s access logs (whether file-based or gRPC) will contain the unnormalized path, so it is possible to examine these logs to detect suspicious patterns and requests that are incongruous with the intended operator configuration intent. In addition, unnormalized paths are available at ext_authz, rate limiting and backend servers for log inspection.\r\n\r\n## References\r\n\r\n* CVE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9901\r\n* Initial GitHub PR that was dropped when severity became apparent: https://github.com/envoyproxy/envoy/issues/6008",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.9.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "",
        "source_package": ""
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-xcx5-93pw-jw2w"
    }
  ]
}