{
  "modified": "2020-09-29T21:39:38Z",
  "published": "2020-09-29T21:39:38Z",
  "schema_version": "1.5.0",
  "id": "CVE-2020-25017",
  "aliases": [
    "GHSA-2v25-cjjq-5f4w"
  ],
  "details": "## Brief description\r\n\r\nEnvoy through 1.15.0 only considers the first value when multiple header values are present for some HTTP headers.\r\nEnvoy’s setCopy() header map API does not replace all existing occurences of a non-inline header.\r\n\r\n## CVSS\r\n\r\n[CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L)\r\n(8.3, High)\r\n\r\n## Affected version(s)\r\n\r\nEnvoy 1.15.0, 1.14.4, 1.13.4, 1.12.6 and before.\r\n\r\n## Affected component(s)\r\n\r\nRequest routing via header matching, access log filtering via header matching, RBAC, CEL matching, ext_authz filter, header to metadata filter, JWT filter, Lua filter.\r\n\r\n## Attack vector(s)\r\n\r\nAttacker includes multiple values of “reference” headers (i.e. headers that Envoy has not explicitly listed as “inline”), e.g.  `x-foo: bar` and `x-foo: baz`. \r\n\r\n## Discover(s)/Credits\r\n\r\nHarvey Tuch, Mark D. Roth (Google LLC), Matt Klein (Lyft)\r\n\r\n## Details\r\n\r\nEnvoy’s [HeaderMapImpl](https://github.com/envoyproxy/envoy/blob/4f98ea66c93693f9a77403e9bb7bc6c3b81d2658/source/common/http/header_map_impl.h#L40) has two classes of headers, _inline_ and _non-inline_. Inline headers treat headers with multiple inline values as a comma-delimited string, as per RFC7230. Non-inline headers have ordered multi-map semantics. Components such as `HeaderUtility::matchHeaders()` that use the `get()` method only observe the first header value.\r\n\r\nAttackers can set multiple values of a non-inline header, e.g.  `x-foo: bar` and `x-foo: baz`. Affected Envoy components will only observe the first value, `x-foo: bar`, in matchers, but both `x-foo: bar` and `x-foo: baz` will be forwarded to upstreams. Upstreams may take both values into consideration, resulting in an inconsistency between Envoy’s request matching and the upstream view of the request.\r\n\r\nAn example of how this might be exploited is if an Envoy filter validates both `x-request-credential` and `x-request-scope` headers, checking whether the given credentials match the request scopes. Only the first scope header would be validated, but the upstream may interpret all provided scopes as being valid.\r\n\r\nAdditionally, Envoy’s header map implementation has a `setCopy()` API which replaces all existing occurrences of a header with a new value. Previously, when calling `setCopy()` on a non-inline header, Envoy would only replace the first value. This would allow other headers to pass to upstream unmodified, thus causing inconsistency between the upstream and Envoy’s view of the request. In particular this API is used by the extauth filter. As part of this CVE release, `setCopy()` now consistently replaces all occurrences of a header with a single value.\r\n\r\n## References\r\n\r\n* CVE: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25017",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "database_specific": {
        "range_status": "error parsing vulnerable versions: error sanitizing version: invalid version: and.0",
        "source_ecosystem": "",
        "source_package": "Envoy"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-2v25-cjjq-5f4w"
    }
  ]
}