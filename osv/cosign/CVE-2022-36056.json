{
  "modified": "2022-09-14T16:10:44Z",
  "published": "2022-09-14T16:10:44Z",
  "schema_version": "1.5.0",
  "id": "CVE-2022-36056",
  "aliases": [
    "GHSA-8gw7-4j42-w388"
  ],
  "details": "## Summary\r\n\r\nA number of vulnerabilities have been found in `cosign verify-blob`, where Cosign would successfully verify an artifact when verification should have failed.\r\n\r\n## Vulnerability 1: Bundle mismatch causes invalid verification.\r\n\r\n### Summary\r\nA cosign bundle can be crafted to successfully verify a blob even if the embedded rekorBundle does not reference the given signature.\r\n\r\n### Details\r\nCosign supports \"bundles\" which intend to allow offline verification of the signature and rekor inclusion. By using the --bundle flag in cosign sign-blob, cosign will create a JSON file called a \"bundle\". These bundles include three fields: base64Signature, cert, and rekorBundle. The desired behavior is that the verification of these bundles would:\r\n\r\n- verify the provided blob using the included signature and certificate\r\n- verify the rekorBundle SET\r\n- verify the rekorBundle payload references the given artifact.\r\n\r\nIt appears that step three is not being performed, allowing \"any old rekorBundle\" to pass validation, even if the rekorBundle payload does not reference the provided blob or the certificate and signature in the rekorBundle do not match those at the top level.\r\n\r\n### Steps to reproduce\r\nEnable keyless signing:\r\n\r\n```\r\nexport COSIGN_EXPERIMENTAL=1\r\n```\r\nCreate two random blobs:\r\n```\r\ndd bs=1 count=50 \u003c/dev/urandom \u003eblob1\r\ndd bs=1 count=50 \u003c/dev/urandom \u003eblob2\r\n```\r\nSign each blob:\r\n```\r\ncosign sign-blob blob1 --bundle bundle1\r\ncosign sign-blob blob2 --bundle bundle2\r\n```\r\nCreate a falsified bundle including the base64Signature and cert fields from bundle1 and the rekorBundle from bundle2:\r\n```\r\njq --slurpfile bundle2 bundle2 '.rekorBundle = $bundle2[0].rekorBundle' bundle1 \u003e invalidBundle\r\n```\r\nNow, the falsified bundle can be used to verify blob1:\r\n```\r\n$ cosign verify-blob blob1 --bundle invalidBundle\r\ntlog entry verified offline\r\nVerified OK\r\n```\r\n\r\n### Patches\r\n\r\nUsers should update to the latest version of Cosign, `1.12.0`.\r\n\r\n### Workaround\r\n\r\nIf you extract the signature and certificate from the `bundle`, you may use it for verification as follows and avoid using an invalid bundle:\r\n```\r\n$ cosign verify-blob blob1 --signature $(jq -r '.base64Signature' bundle1) --certificate $(jq -r '.cert' bundle1)\r\n```\r\n\r\nNote that this will make a network call to Rekor to fetch the Rekor entry. However, you may then be subject to Vulnerability 4.\r\n\r\n##  Vulnerability 2: Certificate Identities are not checked in some cases\r\n\r\n### Summary \r\n\r\nWhen providing identity flags, the email and issuer of a certificate is not checked when verifying a Rekor bundle, and the GitHub Actions identity is never checked.\r\n\r\n### Details\r\n\r\nUsers who provide an offline Rekor bundle (`--bundle`) when verifying a blob using `cosign verify-blob` and include flags that check identity such as `--certificate-email` and `--certificate-oidc-issuer` are impacted. Additionally, users who provide the GitHub Actions verification flags such as `--certificate-github-workflow-name` when running `cosign verify-blob` without a bundle, key reference, or certificate are impacted. \r\n\r\nWhen providing these flags, Cosign ignored their values. If a certificate's identity did not match the provided flags, Cosign would still successfully verify the blob.\r\n\r\n### Patches\r\n\r\nUsers should update to the latest version of Cosign, `1.12.0`.\r\n\r\n### Workarounds\r\n\r\nThere are no workarounds, users should update.\r\n\r\n##  Vulnerability 3: Invalid Rekor bundle without the experimental flag will result in successful verification\r\n\r\n### Summary\r\n\r\nProviding an invalid Rekor bundle without the experimental flag results in a successful verification.\r\n\r\n### Details\r\n\r\nUsers who provide an offline Rekor bundle (`--bundle`) that was invalid (invalid signed entry timestamp, expired certificate, or malformed) when verifying a blob with `cosign verify-blob` and do not set the `COSIGN_EXPERIMENTAL=1` flag are impacted.\r\n\r\nWhen an invalid bundle was provided, Cosign would fallback to checking Rekor log inclusion by requesting proof of inclusion from the log. However, without the `COSIGN_EXPERIMENTAL` flag, Cosign would exit early and successfully verify the blob. \r\n\r\n### Patches\r\n\r\nUsers should update to the latest version of Cosign, `1.12.0`.\r\n\r\n### Workarounds\r\n\r\nThere are no workarounds, users should update.\r\n\r\n##  Vulnerability 4: Invalid transparency log entry will result in successful verification\r\n\r\n### Summary\r\n\r\nAn invalid transparency log entry will result in immediate success for verification.\r\n\r\n### Details\r\n\r\nUsers who provide a signature and certificate to `verify-blob` will fetch the associated Rekor entry for verification. If the returned entry was invalid (invalid signed entry timestamp, invalid inclusion proof, malformed entry with missing verification), then `cosign` [exits](https://github.com/sigstore/cosign/blob/42c6e2a6dd9d92d19077c8e6b7d66d155a5ea28c/cmd/cosign/cli/verify/verify_blob.go#L357) early and succeeds unconditionally.\r\n\r\n### Patches\r\n\r\nUsers should update to the latest version of Cosign, `1.12.0`.\r\n\r\n### Workarounds\r\n\r\nThere are no workarounds, users should update.\r\n\r\n\r\n## For more information\r\nIf you have any questions or comments about this advisory:\r\n* Open an issue in [cosign](https://github.com/sigstore/cosign)\r\n* Send us a message on [Slack](https://sigstore.slack.com/).\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "cosign",
        "purl": "pkg:dhi/cosign"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.12.0"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "sigstore",
        "source_package": "cosign"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-8gw7-4j42-w388"
    }
  ]
}