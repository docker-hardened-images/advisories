{
  "modified": "2022-01-20T11:46:16Z",
  "published": "2022-01-20T11:07:35Z",
  "schema_version": "1.5.0",
  "id": "CVE-2022-21658",
  "aliases": [
    "GHSA-r9cc-f5pr-p3j2"
  ],
  "details": "\u003e This is a cross-post [of the official security advisory](https://groups.google.com/g/rustlang-security-announcements/c/R1fZFDhnJVQ). The official advisory contains a signed version with our PGP key, as well.\r\n\r\n\r\nThe Rust Security Response WG was notified that the `std::fs::remove_dir_all`\r\nstandard library function is vulnerable a race condition enabling symlink\r\nfollowing (CWE-363). An attacker could use this security issue to trick a\r\nprivileged program into deleting files and directories the attacker couldn't\r\notherwise access or delete.\r\n\r\nThis issue has been assigned [CVE-2022-21658][1].\r\n\r\n## Overview\r\n\r\nLet's suppose an attacker obtained unprivileged access to a system and needed\r\nto delete a system directory called `sensitive/`, but they didn't have the\r\npermissions to do so. If `std::fs::remove_dir_all` followed symbolic links,\r\nthey could find a privileged program that removes a directory they have access\r\nto (called `temp/`), create a symlink from `temp/foo` to `sensitive/`, and wait\r\nfor the privileged program to delete `foo/`. The privileged program would\r\nfollow the symlink from `temp/foo` to `sensitive/` while recursively deleting,\r\nresulting in `sensitive/` being deleted.\r\n\r\nTo prevent such attacks, `std::fs::remove_dir_all` already includes protection\r\nto avoid recursively deleting symlinks, as described in its documentation:\r\n\r\n\u003e This function does **not** follow symbolic links and it will simply remove\r\n\u003e the symbolic link itself.\r\n\r\nUnfortunately that check was implemented incorrectly in the standard library,\r\nresulting in a TOCTOU (Time-of-check Time-of-use) race condition. Instead of\r\ntelling the system not to follow symlinks, the standard library first checked\r\nwhether the thing it was about to delete was a symlink, and otherwise it would\r\nproceed to recursively delete the directory.\r\n\r\nThis exposed a race condition: an attacker could create a directory and replace\r\nit with a symlink between the check and the actual deletion. While this attack\r\nlikely won't work the first time it's attempted, in our experimentation we were\r\nable to reliably perform it within a couple of seconds.\r\n\r\n## Affected Versions\r\n\r\nRust 1.0.0 through Rust 1.58.0 is affected by this vulnerability. We're going\r\nto release Rust 1.58.1 later today, which will include mitigations for this\r\nvulnerability. Patches to the Rust standard library are also available for\r\ncustom-built Rust toolchains [here][2].\r\n\r\nNote that the following targets don't have usable APIs to properly mitigate the\r\nattack, and are thus still vulnerable even with a patched toolchain:\r\n\r\n* macOS before version 10.10 (Yosemite)\r\n* REDOX\r\n\r\n## Mitigations\r\n\r\nWe recommend everyone to update to Rust 1.58.1 as soon as possible, especially\r\npeople developing programs expected to run in privileged contexts (including\r\nsystem daemons and setuid binaries), as those have the highest risk of being\r\naffected by this.\r\n\r\nNote that adding checks in your codebase before calling `remove_dir_all` will\r\n**not** mitigate the vulnerability, as they would also be vulnerable to race\r\nconditions like `remove_dir_all` itself. The existing mitigation is working as\r\nintended outside of race conditions.\r\n\r\n## Acknowledgments\r\n\r\nWe want to thank Hans Kratz for independently discovering and disclosing this\r\nissue to us according to the [Rust security policy][3], for developing the fix\r\nfor UNIX-like targets and for reviewing fixes for other platforms.\r\n\r\nWe also want to thank Florian Weimer for reviewing the UNIX-like fix and for\r\nreporting the same issue back in 2018, even though the Security Response WG\r\ndidn't realize the severity of the issue at the time.\r\n\r\nFinally we want to thank Pietro Albini for coordinating the security response\r\nand writing this advisory, Chris Denton for writing the Windows fix, Alex\r\nCrichton for writing the WASI fix, and Mara Bos for reviewing the patches.\r\n\r\n[1]: https://www.cve.org/CVERecord?id=CVE-2022-21658\r\n[2]: https://github.com/rust-lang/wg-security-response/tree/master/patches/CVE-2022-21658\r\n[3]: https://www.rust-lang.org/policies/security",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "rust",
        "purl": "pkg:dhi/rust"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.58.1"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "rust",
        "source_package": "std"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/rust-lang/rust/security/advisories/GHSA-r9cc-f5pr-p3j2"
    }
  ]
}