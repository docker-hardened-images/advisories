{
  "modified": "2023-07-25T15:10:25Z",
  "published": "2023-07-25T15:10:25Z",
  "schema_version": "1.5.0",
  "id": "CVE-2023-35941",
  "aliases": [
    "GHSA-7mhv-gr67-hq55"
  ],
  "details": "### Summary\r\nMalicious clients can construct OAuth2 credentials with permanent validity.\r\n\r\n### Affected component\r\nOAuth2 filter\r\n\r\n### Details\r\nMalicious client is able to construct credentials with permanent validity in some specific scenario. This is caused by some rare scenarios in which HMAC payload can be always valid in OAuth2 filter's check.\r\n\r\n### PoC\r\nIf the virtual host is configured with domains: `[\"*\"]`, a user can put anything in the `HOST` header while logging in and going through the OAuth2 flow.\r\n\r\nIf the client sets the host header with a port like `13518`, it is still able to go through the OAuth2 login flow. Even though the client will be redirected to e.g. `example.com:13518/` at the very end of the flow, Envoy will still issue the cookies and a valid signature to the client based on the given host header like `example.com:13518`.\r\n\r\nAt this point, the correct signature is computed like this:\r\n\r\n```c++\r\nsignature = hmac(\"example.com:13518\" + \"1668386659\" + \"ya29.a0AeTM1icl...\" + ...)\r\n```\r\n\r\nNow, the malicious client can change their `HOST` header override and remove numbers from the port section and instead add them at the start of the `OauthExpires` cookie.\r\n\r\nWhen Envoy gets the request, it will compute a signature like:\r\n\r\n```c++\r\nsignature = hmac(\"example.com:1\" + \"35181668386659\" + \"ya29.a0AeTM1icl...\" + ...)\r\n```\r\n\r\nThis leads to an identical signature to the signature considered valid.\r\n\r\nOnce the HMAC validation passes, Envoy will read the `OauthExpires` value as `35181668386659` which instead of seconds since epoch is interpreted as milliseconds since epoch.\r\n\r\nFor this example, the expiration time as interpreted by Envoy, will be in the year 3084. \r\n\r\nUsing this methodology, the attacker is able to gain permanent access until the HMAC secret in Envoy is rotated.\r\n\r\n### Attack Vectors\r\nMalicious clients construct bad credentials.\r\n\r\n### Impact\r\nNegative impacts on the security and integrity of the service.\r\n\r\n### Mitigation\r\nAvoid wildcards/prefix domain wildcards in host's domain configuration.\r\n\r\n### Credits\r\nErik Engberg ejohansson@spotify.com\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.23.12"
            },
            {
              "introduced": "1.24.0"
            },
            {
              "fixed": "1.24.10"
            },
            {
              "introduced": "1.25.0"
            },
            {
              "fixed": "1.25.9"
            },
            {
              "introduced": "1.26.0"
            },
            {
              "fixed": "1.26.4"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "",
        "source_package": "Envoy"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-7mhv-gr67-hq55"
    }
  ]
}