{
  "modified": "2024-04-18T17:00:21Z",
  "published": "2024-04-18T13:37:53Z",
  "schema_version": "1.5.0",
  "id": "CVE-2024-32475",
  "aliases": [
    "GHSA-3mh5-6q8v-25wj"
  ],
  "details": "### Summary\r\n\r\nWhen an upstream TLS cluster is used with `auto_sni` enabled, a request containing a `host`/`:authority` (or alternate header configured via `override_auto_sni_header `) header longer than 255 characters triggers an abnormal termination of Envoy process.\r\n\r\n### Affected Components\r\n\r\nTLS component for outbound connections.\r\n\r\n### Details\r\n\r\nEnvoy does not gracefully handle an error when setting SNI for outbound TLS connection. The error can occur when Envoy attempts to use the `host`/`:authority` header value longer than 255 characters as SNI for outbound TLS connection. SNI length is limited to 255 characters per the standard. Envoy always expects this operation to succeed and abnormally aborts the process when it fails.\r\n\r\n### Impact\r\n\r\nDenial of Service due to abnormal process termination.\r\n\r\n### Attack vector(s)\r\n\r\nA client request with `host`/`:authority` header (or alternate header configured via `override_auto_sni_header `) longer than 255 characters that is proxied to Envoy cluster with `auto_sni` option set to true.\r\n\r\n### Patches\r\n\r\nThis bug affects all currently maintained versions (and all versions from 1.13 to 1.30): 1.27.x, 1.28.x, 1.29.x, 1.30.x.\r\n\r\nThis bug is fixed in our latest versions. Update to the following versions to resolve:\r\n\r\n- \\\u003e=1.30.1\r\n- \\\u003e=1.29.4\r\n- \\\u003e=1.28.3\r\n- \\\u003e=1.27.5\r\n\r\n### Workarounds\r\n\r\nPossible ways to prevent the crash:\r\n\r\n1. Use Lua or Wasm filter to validate the host before sending it to upstream. This should work for all versions that are effected by this bug. See https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter\r\n2. Drop the requests with `host`/`:authority` longer than 255 characters (i.e. using regular expression matcher) by setting route match rules (to send local reply). You should make the special route first in the route table to ensure all problematic requests are caught.\r\n3. Drop the requests with `host`/`:authority` values longer than 255 bytes with a custom HTTP filter.\r\n4. Rewrite the `host`/`:authority` to a trusted value shorter than 255 characters with `request_headers_to_add`, `host_rewrite_specifier`, or a custom HTTP filter.\r\n5. Set the `auto_sni` option to `false`.\r\n\r\n### Detection\r\n\r\nAbnormal process termination with the `assert failure: rc. Details: error:100000d5:SSL routines:OPENSSL_internal:SSL3_EXT_INVALID_SERVERNAME` message in the error log.\r\n\r\n### Credits\r\nAdiyamankottai Rajaram, Archana \u003cArchana.Rajaram@netscout.com\u003e\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "envoy",
        "purl": "pkg:dhi/envoy"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "1.13.0"
            },
            {
              "fixed": "1.27.5"
            },
            {
              "introduced": "1.28.0"
            },
            {
              "fixed": "1.28.3"
            },
            {
              "introduced": "1.29.0"
            },
            {
              "fixed": "1.29.4"
            },
            {
              "introduced": "1.30.0"
            },
            {
              "fixed": "1.30.1"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "envoyproxy",
        "source_package": "TLS/SNI"
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-3mh5-6q8v-25wj"
    }
  ]
}