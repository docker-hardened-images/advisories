{
  "modified": "2025-05-28T09:20:40Z",
  "published": "2025-05-28T09:20:40Z",
  "schema_version": "1.5.0",
  "id": "CVE-2025-47952",
  "aliases": [
    "GHSA-vrch-868g-9jx5"
  ],
  "details": "## Impact\r\n\r\nThere is a potential vulnerability in Traefik managing the requests using a `PathPrefix`, `Path` or `PathRegex` matcher.\r\n\r\nWhen Traefik is configured to route the requests to a backend using a matcher based on the path, if the URL contains a URL encoded string in its path, it’s possible to target a backend, exposed using another router, by-passing the middlewares chain.\r\n\r\n## Example\r\n\r\n```yaml\r\napiVersion: traefik.io/v1alpha1\r\nkind: IngressRoute\r\nmetadata:\r\n  name: my-service\r\nspec:\r\n  routes:\r\n    - match: PathPrefix(‘/service’)\r\n      kind: Rule\r\n      services:\r\n        - name: service-a\r\n          port: 8080\r\n      middlewares:\r\n        - name: my-middleware-a\r\n    - match: PathPrefix(‘/service/sub-path’)\r\n      kind: Rule\r\n      services:\r\n        - name: service-a\r\n          port: 8080\r\n```\r\n\r\nIn such a case, the request `http://mydomain.example.com/service/sub-path/%2e%2e/other-path` will reach the backend `my-service-a` without operating the middleware `my-middleware-a` unless the computed path is `http://mydomain.example.com/service/other-path` and should be computes by the first router (operating `my-middleware-a`).\r\n\r\n## Patches\r\n\r\n- https://github.com/traefik/traefik/releases/tag/v2.11.25\r\n- https://github.com/traefik/traefik/releases/tag/v3.4.1\r\n\r\n## For more information\r\n\r\nIf you have any questions or comments about this advisory, please [open an issue](https://github.com/traefik/traefik/issues).\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eOriginal Description\u003c/summary\u003e\r\n### Summary\r\n\r\nPath traversal with \"/../\" using URL encodings (\"/%2e%2e\") allows for circumventing routing rules. \r\n\r\n### Details\r\n\r\nWhen having defined a route, you can path traverse using the URL encoded variant of /../ and reach endpoints that are not made publicly available. This issue has been found and fixed earlier with regular /../ and has been fixed in this CVE. This URL encoding trick works around that\r\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-32431\r\n\r\nSimply implementing a check on the URL encoding won't be sufficient as path traversal can take numerous formats. See examples here:\r\nhttps://book.hacktricks.wiki/en/pentesting-web/file-inclusion/index.html\r\n\r\n### PoC\r\n\r\nSetup a service with two endpoints: \"/public\" and \"/private\", which returns a 200 OK for both\r\nSetup a Traefik proxy with a single route which points to the service using path /public\r\n\r\nRegular requests to traefik /public will return 200 OK and to /private should return 404 (response by Traefik)\r\nWhen making a request to /public/%2e%2e/private you should receive a 200 OK.\r\n\r\n### Impact\r\nImpacts all traefik implementations with path prefix routes that expose only part of the downstream api\r\n\r\n### Suggestion\r\nProvide configuration property which disables all path traversals. Steps:\r\n1. Decode URL\r\n2. Evaluate and construct relative path (do traversal before route evaluation)\r\n3. Compare relative/evaluated path to configured routes (PathPrefix/pathRegexp)\r\n\u003c/details\u003e",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "traefik",
        "purl": "pkg:dhi/traefik"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "2.11.25"
            },
            {
              "introduced": "3.0.0"
            },
            {
              "fixed": "3.4.1"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/traefik/traefik/security/advisories/GHSA-vrch-868g-9jx5"
    }
  ]
}