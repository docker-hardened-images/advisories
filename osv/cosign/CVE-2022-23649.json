{
  "modified": "2022-02-18T19:41:37Z",
  "published": "2022-02-18T19:41:37Z",
  "schema_version": "1.5.0",
  "id": "CVE-2022-23649",
  "aliases": [
    "GHSA-ccxc-vr6p-4858"
  ],
  "details": "### Impact\r\n\r\nCosign can be manipulated to claim that an entry for a signature exists in the Rekor transparency log even if it doesn't. This requires the attacker to have pull and push permissions for the signature in OCI. This can happen with both standard signing with a keypair and \"keyless signing\" with Fulcio.\r\n\r\n#### Signing with a keypair\r\n\r\n\u003cdetails\u003e\r\n\r\nTo reproduce this vulnerability, create a keypair and sign an image. Don't store the signature in Rekor:\r\n\r\n```\r\n$ cosign generate-key-pair       \r\n$ cosign sign --key cosign.key IMAGE\r\n```\r\n\r\nIf an attacker has access to the signature in OCI, they can manipulate cosign into believing the entry was stored in Rekor even though it wasn't. To accomplish this, the attacker needs to:\r\n\r\n1. Pull the signature image\r\n2. Annotate the signature image with any valid Rekor bundle under the `dev.sigstore.cosign/bundle` annotation\r\n3. Push the signature image back to OCI\r\n\r\nVerification then prints out the following:\r\n\r\n```\r\n$ cosign verify [--key]  [IMAGE]\r\n\r\nVerification for [IMAGE] --\r\nThe following checks were performed on each of these signatures:\r\n  - The cosign claims were validated\r\n  - Existence of the claims in the transparency log was verified offline\r\n  - The signatures were verified against the specified public key\r\n  - Any certificates were verified against the Fulcio roots.\r\n\r\n[…]\r\n```\r\n\r\nThe claim that `Existence of the claims in the transparency log was verified offline` is inaccurate since an entry for this image doesn't exist in the log.\r\nThe claim that `Any certificates were verified against the Fulcio roots.` is technically correct but since there were no certificates that should be explicitly called out.\r\n\r\n\u003c/details\u003e\r\n\r\n#### \"Keyless signing\" with an OIDC flow\r\n\r\n\u003cdetails\u003e\r\n\r\nTo reproduce this vulnerability, sign the image with a Fulcio identity. Don't store the signature in Rekor: \r\n```\r\n$ COSIGN_EXPERIMENTAL=1 cosign sign IMAGE\r\n[...]\r\nIMAGE appears to be a private repository, please confirm uploading to the transparency log at \"https://rekor.sigstore.dev\" [Y/N]: n\r\n\r\n```\r\n\r\nThen, create a keypair and sign the image again. Store an entry for the signature in Rekor:\r\n\r\n```\r\n$ cosign generate-key-pair       \r\n$ COSIGN_EXPERIMENTAL=1 cosign sign --key cosign.key IMAGE\r\n\r\nEnter password for private key: IMAGE appears to be a private repository, please confirm uploading to the transparency log at \"https://rekor.sigstore.dev\" [Y/N]: y\r\n```\r\n\r\nIf an attacker has access to the signature in OCI, they can manipulate cosign into believing the entry was stored in Rekor even though it wasn't. To accomplish this, the attacker needs to:\r\n\r\n1. Pull the signature image\r\n2. Copy the rekor bundle from the second signature into the first signature under the `dev.sigstore.cosign/bundle` annotation\r\n3. Push the signature image back to OCI\r\n\r\n_Note: For this to work, both signatures must occur during the valid lifespan of the certificate (~20 minutes)._\r\n\r\nVerification then prints out the following:\r\n\r\n```\r\n$ cosign verify [--key]  [IMAGE]\r\n\r\nVerification for [IMAGE] --\r\nThe following checks were performed on each of these signatures:\r\n  - The cosign claims were validated\r\n  - Existence of the claims in the transparency log was verified offline\r\n  - The signatures were verified against the specified public key\r\n  - Any certificates were verified against the Fulcio roots.\r\n\r\n[…]\r\n```\r\n\r\nThe claim that `Existence of the claims in the transparency log was verified offline` is inaccurate since an entry for this image doesn't exist in the log.\r\n\r\nThe claim that `Any certificates were verified against the Fulcio roots.` is technically correct but since there were no certificates that should be explicitly called out.\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Patches\r\nThe vulnerability has been patched in v1.5.2 of cosign.\r\n\r\nThe `signature` in the `signedEntryTimestamp` provided by Rekor is now compared to the `signature` that is being verified. If these don't match, then an error is returned. If a valid bundle is copied to a different signature, verification should fail. \r\n\r\nCosign output now only informs the user that certificates were verified if a certificate was in fact verified.\r\n\r\n\r\n### Workarounds\r\nThe only workaround is upgrading.\r\n\r\n### For more information\r\nIf you have any questions or comments about this advisory:\r\n* Open an issue in [cosign](https://github.com/sigstore/cosign)\r\n* Send us a message on [Slack](https://sigstore.slack.com/). Invite link [here](https://join.slack.com/t/sigstore/shared_invite/zt-mhs55zh0-XmY3bcfWn4XEyMqUUutbUQ).\r\n\r\n### Thank you\r\nThank you to @mtrmac for finding and reporting this vulnerability.\r\n\r\nThank you to everyone who worked on fixing this:\r\n* @nsmith5\r\n* @znewman01 \r\n* @dlorenc\r\n* @mattmoor \r\n* @priyawadhwa\r\n",
  "affected": [
    {
      "package": {
        "ecosystem": "DHI",
        "name": "cosign",
        "purl": "pkg:dhi/cosign"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "1.5.1"
            }
          ]
        }
      ],
      "database_specific": {
        "source_ecosystem": "cosign",
        "source_package": ""
      }
    }
  ],
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-ccxc-vr6p-4858"
    }
  ]
}